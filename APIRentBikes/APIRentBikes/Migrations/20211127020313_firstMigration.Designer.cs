// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIRentBikes.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211127020313_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Bike", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c4a515a-56d1-43a8-8a80-39343fe2654f"),
                            IsAvailable = true,
                            SerialNumber = "U-35986859643"
                        },
                        new
                        {
                            Id = new Guid("c8f84c17-23c2-4822-b611-80b05c945d17"),
                            IsAvailable = true,
                            SerialNumber = "F-95865965965"
                        },
                        new
                        {
                            Id = new Guid("6fe98c41-f2fe-4d45-860e-3042dd182751"),
                            IsAvailable = true,
                            SerialNumber = "Y-24569875645"
                        },
                        new
                        {
                            Id = new Guid("b8cb8aa8-97e3-4049-b31d-8cd5d15503e8"),
                            IsAvailable = true,
                            SerialNumber = "T-63232369569"
                        },
                        new
                        {
                            Id = new Guid("c643797d-eb35-4abd-ac14-5bf3575256fe"),
                            IsAvailable = true,
                            SerialNumber = "Q-01258456985"
                        },
                        new
                        {
                            Id = new Guid("d19fbc15-9c45-40af-97a4-4d4dec977ccd"),
                            IsAvailable = true,
                            SerialNumber = "O-52456985695"
                        },
                        new
                        {
                            Id = new Guid("6c49fe76-22c2-4b72-8c3c-6e1a0f4233c8"),
                            IsAvailable = true,
                            SerialNumber = "C-55569865965"
                        },
                        new
                        {
                            Id = new Guid("ae366b8f-471d-4677-9e52-9949d4836239"),
                            IsAvailable = true,
                            SerialNumber = "R-11122233345"
                        },
                        new
                        {
                            Id = new Guid("c071c09a-8291-4f88-bb1b-021ab8fca3b0"),
                            IsAvailable = true,
                            SerialNumber = "J-99874563210"
                        },
                        new
                        {
                            Id = new Guid("fb11168b-35de-4593-9809-1e54cc460bb6"),
                            IsAvailable = true,
                            SerialNumber = "Z-44455556677"
                        });
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Id_RentalType")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InitDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Total")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalWithDiscount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id_RentalType");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.OrderBike", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id_Bike")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id_Order")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id_Bike");

                    b.HasIndex("Id_Order");

                    b.ToTable("OrderBikes");
                });

            modelBuilder.Entity("Entities.Models.RentalType", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RentalTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b090a296-d3a3-4828-b2f9-0b6c360ad77b"),
                            Name = "Hour",
                            Price = 5m
                        },
                        new
                        {
                            Id = new Guid("3cdb0ce0-6c5e-4c2d-9252-54ed5683b854"),
                            Name = "Day",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("36346ebc-523d-4d0e-8c75-3bcc0f380da0"),
                            Name = "Week",
                            Price = 60m
                        });
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.RentalType", "RentalType")
                        .WithMany("ListOrder")
                        .HasForeignKey("Id_RentalType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalType");
                });

            modelBuilder.Entity("Entities.Models.OrderBike", b =>
                {
                    b.HasOne("Entities.Models.Bike", "Bike")
                        .WithMany("ListOrderBike")
                        .HasForeignKey("Id_Bike")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Order", "Order")
                        .WithMany("ListOrderBike")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Models.Bike", b =>
                {
                    b.Navigation("ListOrderBike");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("ListOrderBike");
                });

            modelBuilder.Entity("Entities.Models.RentalType", b =>
                {
                    b.Navigation("ListOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
